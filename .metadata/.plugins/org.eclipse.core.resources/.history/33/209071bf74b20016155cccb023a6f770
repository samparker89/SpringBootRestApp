package com.samparker.test;

import static org.hamcrest.Matchers.equalTo;
import static org.junit.Assert.assertThat;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;

import com.samparker.DAO.CustomerRepository;
import com.samparker.DOM.Customer;

@RunWith(SpringRunner.class)
@SpringBootTest
@AutoConfigureMockMvc
public class CustomerDetailsControllerTest {

	@Autowired
	private MockMvc mvc;
	
	@Autowired
	private CustomerRepository customerDAO;
	
	private static final String CUSTOMER1_FIRST_NAME = "Sam";
	private static final String CUYSTOMER1_LAST_NAME = "Parker";
	
	private static final String SINGLE_CUSTOMER_JSON_STRING = "{"
			+ "\"firstName\":\"" + CUSTOMER1_FIRST_NAME + "\","
			+ "\"lastName\":\"" + CUYSTOMER1_LAST_NAME + "\""
			+ "}";
	
	@Before
	@After
	public void tearDown(){
		System.out.println("ABOUT TO DELETE");
		customerDAO.deleteByFirstNameAndLastName(CUSTOMER1_FIRST_NAME, CUYSTOMER1_LAST_NAME);
	}
	
	@Test
	public void addCustomerTest() throws Exception {
		
		mvc.perform(MockMvcRequestBuilders.put("/addCustomer").contentType(MediaType.APPLICATION_JSON_UTF8).accept(MediaType.APPLICATION_JSON).content(SINGLE_CUSTOMER_JSON_STRING))
		.andExpect(status().isOk())
		.andExpect(content().string(equalTo(SINGLE_CUSTOMER_JSON_STRING)));
		
		Customer expectedCustomer = new Customer(CUSTOMER1_FIRST_NAME, CUYSTOMER1_LAST_NAME);
		Customer actualCustomer = customerDAO.findByFirstNameAndLastName(CUSTOMER1_FIRST_NAME, CUYSTOMER1_LAST_NAME);
		
		assertThat(actualCustomer.getFirstName(), equalTo(expectedCustomer.getFirstName()));
		assertThat(actualCustomer.getLastName(), equalTo(expectedCustomer.getLastName()));
	}
	
	@Test
	public void addCustomersTest() throws Exception {
		
		mvc.perform(MockMvcRequestBuilders.put("/addCustomer").contentType(MediaType.APPLICATION_JSON_UTF8).accept(MediaType.APPLICATION_JSON).content(SINGLE_CUSTOMER_JSON_STRING))
		.andExpect(status().isOk())
		.andExpect(content().string(equalTo(SINGLE_CUSTOMER_JSON_STRING)));
		
		Customer expectedCustomer = new Customer(CUSTOMER1_FIRST_NAME, CUYSTOMER1_LAST_NAME);
		Customer actualCustomer = customerDAO.findByFirstNameAndLastName(CUSTOMER1_FIRST_NAME, CUYSTOMER1_LAST_NAME);
		
		assertThat(actualCustomer.getFirstName(), equalTo(expectedCustomer.getFirstName()));
		assertThat(actualCustomer.getLastName(), equalTo(expectedCustomer.getLastName()));
	}

}
